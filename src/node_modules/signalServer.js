var stun = require('node-stun')

var rpep = require("rpep")
var websockets = require("rpep-websockets/ws.node")
var msgpack = require("rpep-msgpack")

module.exports = function(port) {
    //var stunport1 = 3478, stunport2 = 3479
    //stun.createServer({
    //    primary: {
    //        host: '127.0.0.1',
    //        port: stunport1
    //    },
    //    secondary: {
    //        host: '127.0.0.2',
    //        port: stunport2
    //    }
    //}).on('log', function (log) {
    //        console.log('%s : [%s] %s', new Date(), log.level, log.message);
    //    }).listen()
    //
    //console.log("stun ports: "+stunport1+", "+stunport2)

    var addresses = {}
    var connections = {}
    var server = rpep(websockets(), msgpack, {closeTimeout:5000})
    server.respond('register', function() {
        var address = this.rawConnection.remoteAddress
        if(connections[address]) {
            var name = address+'-'+addresses[address]
            addresses[address]++
        } else {
            var name = address
            if(!addresses[address]) {
                addresses[address] = 1
            }
        }
        if(connections[name]) {
            throw new rpep.PeerError("A connection is already registered under name "+name) // Shouldn't happen.
        }
        console.log('Registered: '+name)
        connections[name] = this
        this.info = {name:name}
        return name
    })
    server.stream('connect', function(initiatorStream, name) {
    //    console.log("Connection attempt to: "+name)
        if(!connections[name]) {
            initiatorStream.emit("error", new Error("No connection named: "+name))
            initiatorStream.emit("end")
            return
        }

        var listeningStream = connections[name].streamConnect("newPeer", name)
        listeningStream.on('accept', function() {
            initiatorStream.emit("accepted")
            initiatorStream.on('signal', function(signal) {
                listeningStream.emit('signal', signal)
            })
            listeningStream.on('signal', function(signal) {
                initiatorStream.emit('signal', signal)
            })
        })
        listeningStream.on('reject', function(reason) {
            initiatorStream.emit("rejected", reason)
        })
        initiatorStream.on('end', function() {
            initiatorStream.emit('end')
        })
        listeningStream.on('end', function() {
            listeningStream.emit('end')
        })
    })
    server.listen(port, function(request) {
        var conn = request.accept()
    //    console.log("Signaling server got connection!")
        conn.on('close', function() {
            if(conn.info) {
    //            console.log("Unregistering: "+conn.info.name)
                delete connections[conn.info.name]
            }
        })
        conn.on('error', function(e) {
            if(e.code in {ECONNRESET:1}) {
                conn.close()
            } else {
                console.log(e)
            }
        })
    })

    return server
}