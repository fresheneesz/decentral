var proto = require("proto")

module.exports = proto(function() {
    this.init = function(addressSeedList) {
        this.items = []
        this.add(addressSeedList)
    }

    this.add = function(addressSeedList) {
        var that = this
        addressSeedList.forEach(function(item) {
            if(item.type === 'peer') {
                that.items.push(AddressInfo(that, item.address))
            } else {
                throw new Error("Item type "+item.type+" not supported.")
            }
        })
    }

    this.getNextAddress = function() {
        var that = this
        return new Promise(function(resolve, reject) {
            for(var n=0; n<that.items.length; n++) {
                var item = that.items[n]
                if(!item.inUse) {
                    return resolve(item)
                }
            }
            resolve(undefined)
        })
    }

    this.findAddressInUse = function(peerAddress) {
        for(var n=0; n<this.items.length; n++) {
            var item = this.items[n]
            if(item.inUse && item.peerAddress === peerAddress) {
                return item
            }
        }
    }
})

var AddressInfo = proto(function() {
    this.init = function(database, item) {
        this.database = database
        this.peerAddress = item.peerAddress
        this.signalServerHost = item.signalServerHost
        this.signalServerPort = item.signalServerPort
//        this.pubkey
        this.date = Date.now() // The date the address was found.
        this.lastSeen = Date.now()
        this.quality = 0
        this.usefulDataSent = 0     // How much useful data has been transmitted to the connection.
        this.usefulDataRecieved = 0 // How much useful data has been received from this connection.
        this.inUse = false
    }

    this.changeQuality = function(amount) {
        this.quality += amount
        // Todo: make this more efficient by finding the new index and moving the item there.
        this.database.items.sort(function(a, b){
            return a.quality - b.quality
        })
    }
})