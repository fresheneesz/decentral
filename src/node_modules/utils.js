var http = require('http')
var os = require('os')

// Returns an object like: {v4:[...], v6: [...]}
exports.findInternetConnectedIps = function() {
    return new Promise(function(resolve, reject) {
        var promises = [], connectedAddresses = {v4:[], v6:[], errors: []}
        var ifaces = os.networkInterfaces()
        Object.keys(ifaces).forEach(function (ifname) {
            ifaces[ifname].forEach(function (iface) {
                // skip over internal (i.e. 127.0.0.1)
                if (iface.internal !== false) {
                    return;
                }

                var family = iface.family === 'IPv4'? 4:6
                promises.push(checkConnectivity(iface.address, family).then(function(hasConnectivity) {
                    //console.log(iface.address+": "+result)
                    if(hasConnectivity) {
                        connectedAddresses['v'+family].push(iface.address)
                    }
                }).catch(function(e) {
                        connectedAddresses.errors.push("Error checking connectivity for "+iface.address+": "+e)
                }))

                //console.log(ifname, '"'+iface.address+'"');
            })
        })
        return Promise.all(promises).then(function() {
            resolve(connectedAddresses)
        })
    })
}

function checkConnectivity(localAddress, family) {
    return new Promise(function(resolve, reject) {
        var request = http.request({
            host: 'www.google.com',
            localAddress: localAddress,
            family: family
        }, function(response) {
            request.abort()
            response.on('end', function () {
                resolve(true)
            })
        }).end()

        var requestAbortedForTimeout = false
        request.on('error', function(e) {
            if(e.code === 'ENETUNREACH') {
                resolve(false)
            } if(e.code === 'ETIMEDOUT') {
                resolve(false)
            } if(e.message === 'socket hang up' && requestAbortedForTimeout) {
                resolve(false)
            } else {
                reject(e)
            }
        })

        // Note that the http request timeout doesn't seem to be respected all the time.
        setTimeout(function() {
            requestAbortedForTimeout = true
            request.abort()
        }, 500)
    })
}