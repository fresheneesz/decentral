var WebRtcPeer = require('simple-peer')

// wrtc - (Optional) The simple-peer wrtc option.
module.exports = function(wrtc) {
    return {
        // connectionOptions contains:
          // remoteSignalEmitter - An EventEmitter that should be set up by the caller to emit 'signal' events from the remote peer.
          // sendSignal(signal) - A function used to send a signal to the remote peer.
          // Any of the simple-peer constructor options https://github.com/feross/simple-peer#peer--new-peeropts except
          //   `initiator` which will be set to true. The most important one is:
            // config.iceServers - The list of ice servers to use as connection mediators.
        // Todo: support video and auto streams and tracks somehow.
        connect: function(/*[inputConnectionOptions,] rpepOptions*/) {
            if(arguments.length <= 1) {
                var rpepOptions = arguments[0]
            } else {
                var inputConnectionOptions = arguments[0]
                var rpepOptions = arguments[1]
            }

            var connectionOptions = {}
            if(inputConnectionOptions) {
                Object.assign(connectionOptions, inputConnectionOptions) // Copy fields.
            }

            return createRtcConnection(connectionOptions, true, wrtc)
        },

        // inputListenerOptions can contain:
            // offerEmitter - An EvenEmitter that should be set up by the caller to emit a couple events:
                // 'newPeer' - Emitted on a new remote peer. The event should send two arguments:
                    // remoteSignalEmitter - Identical to the `connect` `connectionOptions.remoteSignalEmitter` emitter.
                    // sendSignal(signal) - Identical to the `connect` `connectionOptions.sendSignal` function.
                    // rejectRequest() - Called if the server rejects an incomming request.
                // 'listening' - Emitted when listening for new peers has started.
            // Any of the simple-peer constructor options https://github.com/feross/simple-peer#peer--new-peeropts except
            // `initiator` which will be set to true. The most important one is:
                // config.iceServers - The list of ice servers to use as connection mediators.
        listen: function(/*[inputListenerOptions,] rpepOptions, requestHandler*/) {
            if(arguments.length <= 2) {
                var rpepOptions = arguments[0]
                var requestHandler = arguments[1]
            } else {
                var inputListenerOptions = arguments[0]
                var rpepOptions = arguments[1]
                var requestHandler = arguments[2]
            }

            var offerEmitter = inputListenerOptions.offerEmitter

            var offerListener
            offerEmitter.on('newPeer', offerListener = function(request, remoteSignalEmitter, sendSignal, rejectRequest) {
                try {
                    requestHandler({
                        rawRequest: request,

                        accept: function() {
                            var connectionOptions = {}
                            if(inputListenerOptions) {
                                Object.assign(connectionOptions, inputListenerOptions) // Copy fields.
                            }
                            connectionOptions.sendSignal = sendSignal
                            connectionOptions.remoteSignalEmitter = remoteSignalEmitter
                            return createRtcConnection(connectionOptions, false, wrtc)
                        },

                        reject: function() {
                            rejectRequest()
                        }
                    })
                } catch(e) {
                    if(errorHandler) {
                        errorHandler(e)
                    } else {
                        throw e
                    }
                }
            })

            var onCloseHandler, errorHandler, listeningHandler;
            return {
                close: function() {
                    offerEmitter.off('newPeer', offerListener)
                    if(listeningHandler) offerEmitter.off('listening', listeningHandler)
                    if(onCloseHandler) offerEmitter.off('close', onCloseHandler)
                    if(errorHandler) offerEmitter.off('error', errorHandler)
                },
                onListening: function(cb) {
                    listeningHandler = cb
                    offerEmitter.on('listening', cb)
                },
                onClose: function(cb) {
                    onCloseHandler = cb
                    offerEmitter.on('close', cb)
                },
                onError: function(cb) {
                    errorHandler = cb
                    offerEmitter.on('error', cb)
                }
            }
        }
    }
}

function createRtcConnection(connectionOptions, initiate, wrtc) {
    connectionOptions.initiator = initiate
    if(!connectionOptions.wrtc && wrtc) connectionOptions.wrtc = wrtc
    var sendSignal = connectionOptions.sendSignal
    var remoteSignalEmitter = connectionOptions.remoteSignalEmitter

    const rtcConnection = new WebRtcPeer(connectionOptions)
    rtcConnection.on('signal', sendSignal)
    remoteSignalEmitter.on('signal', function(signal) {
        rtcConnection.signal(signal)
    })

    return {
        send: function(m) {
            rtcConnection.send(m)
        },
        close: function() {
            rtcConnection.destroy()
        },
        onOpen: function(cb) {
            rtcConnection.on('connect', cb)
        },
        onClose: function(cb) {
            rtcConnection.on('close', cb)
        },
        onMessage: function(cb) {
            rtcConnection.on('data', cb)
        },
        onError: function(cb) {
            rtcConnection.on('error', function(e) {
                cb(e)
            })
        },
        rawConnection: rtcConnection
    }
}